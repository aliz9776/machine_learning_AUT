# -*- coding: utf-8 -*-
"""hw4_ML_Q2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DlqtK3qKyvFMTEwPnfbmuAg8lmy3YQCJ

**Problem 2: Custom Dataset | SVM**

a) Use the make_classification function to generate a custom dataset. split the dataset into 80% training data and 20% validation data.
"""

from sklearn.datasets import load_iris
from sklearn.model_selection import train_test_split, GridSearchCV

#  Load the Iris dataset
iris = load_iris()
X, target = iris.data, iris.target

# Split dataset into training and test data
X_train, X_test, target_train, target_test = train_test_split(X, target , test_size=0.2, random_state=42)

"""b) Get the best parameters for the model using svm and grid search."""

from sklearn.svm import SVC

# Define the parameter grid for grid search
parameter_grid = {'C': [0.1, 1, 10], 'kernel': ['linear', 'rbf'], 'gamma': [  0.1, 0.01, 0.001  ]}

# Perform grid search with SVM
svm_model = SVC()
grid_search = GridSearchCV(svm_model, parameter_grid, cv=5)
grid_search.fit(X_train, target_train)

# Get the best parameters
best_parameters = grid_search.best_params_
print("Best parameters:", best_parameters)

"""d) Model your dataset with mkl and get the desired outputs such as precision, recall, etc."""

pip install MKLpy

"""d) Model your dataset with mkl and get the desired outputs such as precision, recall, etc."""

from MKLpy.algorithms import EasyMKL
from MKLpy.algorithms import AverageMKL
from MKLpy.model_selection import train_test_split
from sklearn.metrics.pairwise import linear_kernel , rbf_kernel
from MKLpy.preprocessing import kernel_normalization
from sklearn.metrics import precision_score, recall_score
from MKLpy.preprocessing import kernel_normalization


#kernels

KL = [linear_kernel(X), rbf_kernel(X, gamma=0.01)]


# base kernels are normalize to prevent scaling and numerical issues

KL_norm = [kernel_normalization(K) for K in KL]

# Split dataset into training and test data (80/20)

X_train, X_test, target_train, target_test = train_test_split(KL_norm, target , test_size=.2, random_state=42)

# Create an instance of AverageMKL and fit the data
mkl = AverageMKL()
mkl.fit(X_train, target_train)

# Predict the output class for the test data
y_pred_test = mkl.predict(X_test)

# Calculate precision and recall for test data
precision_test = precision_score(target_test, y_pred_test, average='weighted')
recall_test = recall_score(target_test, y_pred_test, average='weighted')

print("Test Data:")
print("Precision:", precision_test)
print("Recall:", recall_test)