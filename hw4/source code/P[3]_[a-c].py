# -*- coding: utf-8 -*-
"""hw4_ML_Q3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c1oV9y-KOaSrM6m4WNp3mB8QV-zFBA1x

**Problem 3: Credit Card Fraud | SVM**
"""

from google.colab import drive

# Mount Google Drive
drive.mount('/content/drive')

file_path = '/content/drive/MyDrive/creditcard.rar'

import patoolib

# Specify the path to the downloaded RAR file
rar_path = file_path

# Extract all files from the RAR archive
patoolib.extract_archive(rar_path, outdir='/content/')

"""a) Load data set and split the dataset into 80% training data and 20% validation data then Implement the SVM algorithm on the training data and tune the parameters to achieve the best performance"""

import pandas as pd


df = pd.read_csv('creditcard.csv')


class_0 = df[df['Class'] == 0]
class_1 = df[df['Class'] == 1]

num_samples_class_0 = int(0.99 * 10000)  # 99% of 10,000
num_samples_class_1 = 10000 - num_samples_class_0  # 1% of 10,000

sample_0 = class_0.sample(n=num_samples_class_0, random_state=42)


sample_1 = class_1.sample(n=num_samples_class_1, random_state=42)

# Combine
sample_df = pd.concat([sample_0, sample_1])

# Shuffle the combined sample
credit_sample = sample_df.sample(frac=1, random_state=42)

print(credit_sample)

print(len(credit_sample))

"""b) What is one-class SVM and how can it be used in outlier detection? run the one-class SVM on training data. (Set the nu, kernel and gamma)."""

from sklearn.svm import OneClassSVM
from sklearn.preprocessing import StandardScaler

from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.svm import SVC
from sklearn.metrics import accuracy_score

X = credit_sample.drop('Class', axis=1)
target = credit_sample['Class']

# Convert labels to -1 (outliers) and 1 (normal)
target[target == 0] = -1

# Feature Scaling
scaler = StandardScaler()
X = scaler.fit_transform(X)

# Split the data into training and validation sets
X_train, X_val, target_train, target_val = train_test_split(X, target, test_size=0.2, random_state=42)



# One-Class SVM model
one_class_svm = OneClassSVM()

#parametr tuning
param_grid = {
    'gamma': [0.01, 0.1, 1, 10],
    'kernel': ['linear', 'rbf', 'poly'],
    'nu': [0.01, 0.05, 0.1, 0.2]
}

# Perform grid search to find the best parameters
grid_search = GridSearchCV(one_class_svm, param_grid, scoring='accuracy', cv=5)
grid_search.fit(X_train, target_train)

# Get the best parameters and model
best_params = grid_search.best_params_


print("best parametrs : \n")
print(best_params)

"""c) Make outlier predictions on the validation dataset. Which of the metrics such as precision, recall, etc. can show how accurately our model was able to detect outlier data? Explain your reasons."""

import pandas as pd
from sklearn.svm import OneClassSVM



# Instantiate the One-Class SVM model
one_class_svm = OneClassSVM(nu=0.2, kernel='rbf', gamma=10)

# Fit the One-Class SVM on the training data
one_class_svm.fit(X)

from sklearn.metrics import precision_score, recall_score, f1_score
import numpy as np
# Predict the labels for the validation data
target_valid_pred = one_class_svm.predict(X_val)





# Compute precision, recall, and F1-score
precision = precision_score(target_val, target_valid_pred, average='weighted')
recall = recall_score(target_val, target_valid_pred, average='weighted')
f1 = f1_score(target_val, target_valid_pred, average='weighted')

print("Precision:", precision)
print("Recall:", recall)
print("F1-score:", f1)